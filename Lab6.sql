--1:
SELECT TO_CHAR(AVG(COST), '$999,999.99') AS "Average Cost per Course"
FROM STUDENT.COURSE;

--2:
SELECT STUDENT.STUDENT_ID, ZIPCODE.STATE
FROM STUDENT.STUDENT INNER JOIN STUDENT.ZIPCODE
ON ZIPCODE.ZIP=STUDENT.ZIP
WHERE ROWNUM<=10
ORDER BY STUDENT.STUDENT_ID;

--3:
SELECT STUDENT.STUDENT_ID, ZIPCODE.STATE
FROM STUDENT.STUDENT, STUDENT.ZIPCODE
WHERE ZIPCODE.ZIP=STUDENT.ZIP AND ROWNUM<=10
ORDER BY STUDENT_ID;

--4:
SELECT STUDENT.STUDENT_ID,ZIPCODE.CITY || ', ' || ZIPCODE.STATE AS "City, State"
FROM STUDENT.STUDENT INNER JOIN STUDENT.ZIPCODE
ON ZIPCODE.ZIP=STUDENT.ZIP
WHERE ROWNUM<=10
ORDER BY STUDENT.STUDENT_ID;

--5:
SELECT COURSE.DESCRIPTION AS "Course Description", TO_CHAR(COURSE_REVENUE.REVENUE, '$999,999.99') AS "Total Revnue",
TO_CHAR(COURSE_REVENUE.REVENUE/COURSE_REVENUE.NUM_OF_SECTIONS, '$999,999.99') AS "Revenue per section taught"
FROM STUDENT.COURSE INNER JOIN STUDENT.COURSE_REVENUE
ON COURSE.COURSE_NO=COURSE_REVENUE.COURSE_NO
ORDER BY "Revenue per section taught" desc;

--6:
SELECT INSTRUCTOR.INSTRUCTOR_ID, INSTRUCTOR.FIRST_NAME, INSTRUCTOR.LAST_NAME, INSTRUCTOR_SUMMARY.NUM_OF_CLASSES, INSTRUCTOR_SUMMARY.NUM_OF_STUDENTS
FROM STUDENT.INSTRUCTOR INNER JOIN STUDENT.INSTRUCTOR_SUMMARY
ON INSTRUCTOR.INSTRUCTOR_ID=INSTRUCTOR_SUMMARY.INSTRUCTOR_ID
ORDER BY INSTRUCTOR_SUMMARY.NUM_OF_CLASSES DESC, INSTRUCTOR_SUMMARY.NUM_OF_STUDENTS DESC;

--7:
SELECT GRADE_TYPE.GRADE_TYPE_CODE, GRADE_TYPE.DESCRIPTION, REPLACE(TO_CHAR(AVG(GRADE.NUMERIC_GRADE),'99.99'),'.00')
FROM STUDENT.GRADE_TYPE INNER JOIN STUDENT.GRADE
ON GRADE_TYPE.GRADE_TYPE_CODE=GRADE.GRADE_TYPE_CODE
GROUP BY  GRADE_TYPE.GRADE_TYPE_CODE, GRADE_TYPE.DESCRIPTION;


--8:
SELECT INSTRUCTOR.INSTRUCTOR_ID, INSTRUCTOR.LAST_NAME, TO_CHAR(INSTRUCTOR_SUMMARY.REVENUE / INSTRUCTOR_SUMMARY.NUM_OF_STUDENTS,'$999,999.99') AS "Revenue per student"
FROM STUDENT.INSTRUCTOR INNER JOIN STUDENT.INSTRUCTOR_SUMMARY
ON INSTRUCTOR.INSTRUCTOR_ID=INSTRUCTOR_SUMMARY.INSTRUCTOR_ID
WHERE INSTRUCTOR_SUMMARY.REVENUE > 0
ORDER BY INSTRUCTOR_SUMMARY.REVENUE;

--9:
SELECT INVOICES.INVOICE_ID, VENDORS.VENDOR_NAME
FROM AP.INVOICES INNER JOIN AP.VENDORS
ON INVOICES.VENDOR_ID=VENDORS.VENDOR_ID
WHERE ROWNUM <=10
ORDER BY INVOICE_ID ASC;

--10:
SELECT DISTINCT VENDOR_NAME
FROM AP.VENDORS
WHERE ROWNUM<=20;

--11:
SELECT INVOICES.INVOICE_ID, VENDORS.VENDOR_NAME
FROM AP.INVOICES INNER JOIN AP.VENDORS
ON INVOICES.VENDOR_ID=VENDORS.VENDOR_ID
WHERE VENDOR_NAME BETWEEN 'H' AND 'M'
ORDER BY INVOICE_ID ASC;

--12:
SELECT MIN(PAYMENT_DATE) AS "Earliest Payment Date", MAX(PAYMENT_DATE) AS "Latest Payment Date", MIN(PAYMENT_DATE) + ROUND(TO_CHAR(MAX(PAYMENT_DATE)-MIN(PAYMENT_DATE))/2) AS "Date in Between"
FROM AP.INVOICES
WHERE PAYMENT_DATE IS NOT NULL;

--13:
SELECT INVOICE_NUMBER, REPLACE(INVOICE_NUMBER, '-') AS "No Dashes"
FROM AP.INVOICES
WHERE ROWNUM<=20;

--14:
SELECT VENDOR_NAME
FROM AP.VENDORS
WHERE LOWER(VENDOR_NAME) LIKE '%inc' OR LOWER(VENDOR_NAME) LIKE '%inc.'
AND LOWER(VENDOR_NAME) NOT LIKE 'inc';

--15:
SELECT VENDOR_NAME, LTRIM(NVL(REPLACE(VENDOR_ADDRESS1,'NULL'),'')) || ' ' || VENDOR_CITY || ' ' || VENDOR_STATE || ' ' || VENDOR_ZIP_CODE AS "Complete Address"
FROM AP.VENDORS
WHERE LOWER(VENDOR_NAME) LIKE 'p%'
ORDER BY VENDOR_NAME;
